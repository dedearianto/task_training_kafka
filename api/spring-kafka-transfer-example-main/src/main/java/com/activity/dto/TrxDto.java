/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.activity.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TrxDto extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3314659234326513640L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TrxDto\",\"namespace\":\"com.activity.dto\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"noReferensi\",\"type\":\"string\"},{\"name\":\"norekPengirim\",\"type\":\"string\"},{\"name\":\"norekPenerima\",\"type\":\"string\"},{\"name\":\"jumlahTransfer\",\"type\":\"double\"},{\"name\":\"status\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TrxDto> ENCODER =
      new BinaryMessageEncoder<TrxDto>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TrxDto> DECODER =
      new BinaryMessageDecoder<TrxDto>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TrxDto> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TrxDto> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TrxDto>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TrxDto to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TrxDto from a ByteBuffer. */
  public static TrxDto fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Long id;
  @Deprecated public java.lang.CharSequence noReferensi;
  @Deprecated public java.lang.CharSequence norekPengirim;
  @Deprecated public java.lang.CharSequence norekPenerima;
  @Deprecated public double jumlahTransfer;
  @Deprecated public java.lang.CharSequence status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TrxDto() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param noReferensi The new value for noReferensi
   * @param norekPengirim The new value for norekPengirim
   * @param norekPenerima The new value for norekPenerima
   * @param jumlahTransfer The new value for jumlahTransfer
   * @param status The new value for status
   */
  public TrxDto(java.lang.Long id, java.lang.CharSequence noReferensi, java.lang.CharSequence norekPengirim, java.lang.CharSequence norekPenerima, java.lang.Double jumlahTransfer, java.lang.CharSequence status) {
    this.id = id;
    this.noReferensi = noReferensi;
    this.norekPengirim = norekPengirim;
    this.norekPenerima = norekPenerima;
    this.jumlahTransfer = jumlahTransfer;
    this.status = status;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return noReferensi;
    case 2: return norekPengirim;
    case 3: return norekPenerima;
    case 4: return jumlahTransfer;
    case 5: return status;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: noReferensi = (java.lang.CharSequence)value$; break;
    case 2: norekPengirim = (java.lang.CharSequence)value$; break;
    case 3: norekPenerima = (java.lang.CharSequence)value$; break;
    case 4: jumlahTransfer = (java.lang.Double)value$; break;
    case 5: status = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'noReferensi' field.
   * @return The value of the 'noReferensi' field.
   */
  public java.lang.CharSequence getNoReferensi() {
    return noReferensi;
  }

  /**
   * Sets the value of the 'noReferensi' field.
   * @param value the value to set.
   */
  public void setNoReferensi(java.lang.CharSequence value) {
    this.noReferensi = value;
  }

  /**
   * Gets the value of the 'norekPengirim' field.
   * @return The value of the 'norekPengirim' field.
   */
  public java.lang.CharSequence getNorekPengirim() {
    return norekPengirim;
  }

  /**
   * Sets the value of the 'norekPengirim' field.
   * @param value the value to set.
   */
  public void setNorekPengirim(java.lang.CharSequence value) {
    this.norekPengirim = value;
  }

  /**
   * Gets the value of the 'norekPenerima' field.
   * @return The value of the 'norekPenerima' field.
   */
  public java.lang.CharSequence getNorekPenerima() {
    return norekPenerima;
  }

  /**
   * Sets the value of the 'norekPenerima' field.
   * @param value the value to set.
   */
  public void setNorekPenerima(java.lang.CharSequence value) {
    this.norekPenerima = value;
  }

  /**
   * Gets the value of the 'jumlahTransfer' field.
   * @return The value of the 'jumlahTransfer' field.
   */
  public java.lang.Double getJumlahTransfer() {
    return jumlahTransfer;
  }

  /**
   * Sets the value of the 'jumlahTransfer' field.
   * @param value the value to set.
   */
  public void setJumlahTransfer(java.lang.Double value) {
    this.jumlahTransfer = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Creates a new TrxDto RecordBuilder.
   * @return A new TrxDto RecordBuilder
   */
  public static com.activity.dto.TrxDto.Builder newBuilder() {
    return new com.activity.dto.TrxDto.Builder();
  }

  /**
   * Creates a new TrxDto RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TrxDto RecordBuilder
   */
  public static com.activity.dto.TrxDto.Builder newBuilder(com.activity.dto.TrxDto.Builder other) {
    return new com.activity.dto.TrxDto.Builder(other);
  }

  /**
   * Creates a new TrxDto RecordBuilder by copying an existing TrxDto instance.
   * @param other The existing instance to copy.
   * @return A new TrxDto RecordBuilder
   */
  public static com.activity.dto.TrxDto.Builder newBuilder(com.activity.dto.TrxDto other) {
    return new com.activity.dto.TrxDto.Builder(other);
  }

  /**
   * RecordBuilder for TrxDto instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TrxDto>
    implements org.apache.avro.data.RecordBuilder<TrxDto> {

    private java.lang.Long id;
    private java.lang.CharSequence noReferensi;
    private java.lang.CharSequence norekPengirim;
    private java.lang.CharSequence norekPenerima;
    private double jumlahTransfer;
    private java.lang.CharSequence status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.activity.dto.TrxDto.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.noReferensi)) {
        this.noReferensi = data().deepCopy(fields()[1].schema(), other.noReferensi);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.norekPengirim)) {
        this.norekPengirim = data().deepCopy(fields()[2].schema(), other.norekPengirim);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.norekPenerima)) {
        this.norekPenerima = data().deepCopy(fields()[3].schema(), other.norekPenerima);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.jumlahTransfer)) {
        this.jumlahTransfer = data().deepCopy(fields()[4].schema(), other.jumlahTransfer);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TrxDto instance
     * @param other The existing instance to copy.
     */
    private Builder(com.activity.dto.TrxDto other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.noReferensi)) {
        this.noReferensi = data().deepCopy(fields()[1].schema(), other.noReferensi);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.norekPengirim)) {
        this.norekPengirim = data().deepCopy(fields()[2].schema(), other.norekPengirim);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.norekPenerima)) {
        this.norekPenerima = data().deepCopy(fields()[3].schema(), other.norekPenerima);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.jumlahTransfer)) {
        this.jumlahTransfer = data().deepCopy(fields()[4].schema(), other.jumlahTransfer);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.activity.dto.TrxDto.Builder setId(java.lang.Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.activity.dto.TrxDto.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'noReferensi' field.
      * @return The value.
      */
    public java.lang.CharSequence getNoReferensi() {
      return noReferensi;
    }

    /**
      * Sets the value of the 'noReferensi' field.
      * @param value The value of 'noReferensi'.
      * @return This builder.
      */
    public com.activity.dto.TrxDto.Builder setNoReferensi(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.noReferensi = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'noReferensi' field has been set.
      * @return True if the 'noReferensi' field has been set, false otherwise.
      */
    public boolean hasNoReferensi() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'noReferensi' field.
      * @return This builder.
      */
    public com.activity.dto.TrxDto.Builder clearNoReferensi() {
      noReferensi = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'norekPengirim' field.
      * @return The value.
      */
    public java.lang.CharSequence getNorekPengirim() {
      return norekPengirim;
    }

    /**
      * Sets the value of the 'norekPengirim' field.
      * @param value The value of 'norekPengirim'.
      * @return This builder.
      */
    public com.activity.dto.TrxDto.Builder setNorekPengirim(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.norekPengirim = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'norekPengirim' field has been set.
      * @return True if the 'norekPengirim' field has been set, false otherwise.
      */
    public boolean hasNorekPengirim() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'norekPengirim' field.
      * @return This builder.
      */
    public com.activity.dto.TrxDto.Builder clearNorekPengirim() {
      norekPengirim = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'norekPenerima' field.
      * @return The value.
      */
    public java.lang.CharSequence getNorekPenerima() {
      return norekPenerima;
    }

    /**
      * Sets the value of the 'norekPenerima' field.
      * @param value The value of 'norekPenerima'.
      * @return This builder.
      */
    public com.activity.dto.TrxDto.Builder setNorekPenerima(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.norekPenerima = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'norekPenerima' field has been set.
      * @return True if the 'norekPenerima' field has been set, false otherwise.
      */
    public boolean hasNorekPenerima() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'norekPenerima' field.
      * @return This builder.
      */
    public com.activity.dto.TrxDto.Builder clearNorekPenerima() {
      norekPenerima = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'jumlahTransfer' field.
      * @return The value.
      */
    public java.lang.Double getJumlahTransfer() {
      return jumlahTransfer;
    }

    /**
      * Sets the value of the 'jumlahTransfer' field.
      * @param value The value of 'jumlahTransfer'.
      * @return This builder.
      */
    public com.activity.dto.TrxDto.Builder setJumlahTransfer(double value) {
      validate(fields()[4], value);
      this.jumlahTransfer = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'jumlahTransfer' field has been set.
      * @return True if the 'jumlahTransfer' field has been set, false otherwise.
      */
    public boolean hasJumlahTransfer() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'jumlahTransfer' field.
      * @return This builder.
      */
    public com.activity.dto.TrxDto.Builder clearJumlahTransfer() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.activity.dto.TrxDto.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.activity.dto.TrxDto.Builder clearStatus() {
      status = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TrxDto build() {
      try {
        TrxDto record = new TrxDto();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.noReferensi = fieldSetFlags()[1] ? this.noReferensi : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.norekPengirim = fieldSetFlags()[2] ? this.norekPengirim : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.norekPenerima = fieldSetFlags()[3] ? this.norekPenerima : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.jumlahTransfer = fieldSetFlags()[4] ? this.jumlahTransfer : (java.lang.Double) defaultValue(fields()[4]);
        record.status = fieldSetFlags()[5] ? this.status : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TrxDto>
    WRITER$ = (org.apache.avro.io.DatumWriter<TrxDto>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TrxDto>
    READER$ = (org.apache.avro.io.DatumReader<TrxDto>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
